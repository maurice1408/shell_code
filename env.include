include gmsl
include help-system.include
-include project.include

# ######################################
# Functions
info-msg        = $($(info $(DTM):INFO: $1))
info-plain      = $($(info $1))
err-msg         = $($(error $(DTM):ERROR: $1))

table-name      = $(subst $(PFX)_,,$(basename $1))


# ######################################
# Use datetime in messages
DTM             = $(strip $(shell date '+%Y-%m-%d %H:%M:%S'))

# ######################################
# Commands
#
BCP             := bcp
GAWK            := gawk
MKDIR           := mkdir
PSQL            := psql
RM              := rm
SQLCMD          := sqlcmd

# ######################################
# Scripts
#
BCP             := bcp
BCPX            := bcpx.sh
BEELINE         := bl.sh
PDSHELL         := pd_shell.sh
SHELL           := sh
RUNJOBS         := RunPodiumJobs.sh
ARG_ING         := ING
ARG_DF          := WKF

# ######################################
# Constants
#
ASTR            := *
BCPX_DELETE     := e
BCPX_TRUNCATE   := E
BCPX_HINT       := -H "TABLOCK,CHECK_CONSTRAINTS"
BCP_FIELD_TERM  := 0x01
BCP_RECORD_TERM := $(shell echo -e "\x1c")\n
DELIM           := :
DOLLAR          := $$
DUNDER          := __
RM_OPT          := -r -f
SQLCMD_OPT      := -l 60 -W -X -b -s "|" -K ReadOnly -h -1
SQLIN_FILE      := tmp.sql
TBL_COUNT       := Y
UNDER           := _

# ######################################
# Internal Constants
#
# This is the GNU Make Standard Library version number as a list with
# three items: major, minor, revision

dif_version := 1 0 0

__dif_name  := Data Insights Framework


# ######################################
# Defaults
ENV             := DV
SRC             := BIF
INFO            := N

# ######################################
# Build envs assoc array
#
$(call set,envs,DV,dev)
$(call set,envs,QA,qar)
$(call set,envs,MO,stg)
$(call set,envs,PR,prod)

# ######################################
# Check required files exist
#
$(call assert_exists,project.include)

# ######################################
# Check required variables SRC and ENV 
# set
#
$(call assert,$(call get,envs,$(ENV)),The ENV make variable must be set to one of DV QA MO or PR)
$(call assert,$(SRC),The SRC variable must be set)
$(call assert,$(PROJECT),The PROJECT variable must be set in the project.include file)

# ######################################
# Directories
#
FMT             := Fmt
HQL             := HQL
META            := Metadata
QC              := QC
TGT             := TGT

# ######################################
# Sun Life Environment
#
APPS_BASE       := /apps/us/datalake
INGEST_SCRIPTS  := scheduling/scripts
GOLD_SCRIPTS    := scheduling/scripts/goldlayer
HQL_SCRIPTS     := pdjobs/hql

# ######################################
# Confirm message
# ######################################
$(call info-msg,                  Included: env.include)

# ######################################
# Connection details
# ######################################
$(call info-msg,                 Including: $(ENV)_db.include)
include $(ENV)_db.include
$(call info-msg,                 Including: $(ENV)_psql.include)
include $(ENV)_psql.include
# ######################################
# Control-M related variables
# ######################################
$(call info-msg,                 Including: $(ENV)_CM.include)
include $(ENV)_CM.include

# ######################################
# Source and target Tables
include $(SRC)_tables.include


# ######################################
# Resolve TGT_PFX
ifdef TGT_PFX
PFX             := $(TGT_PFX)
else
PFX             := $(SRC)
endif


# #####################################
# Startup messages
#
$(call info-msg, $(__dif_name) ($(dif_version)))
$(call info-msg, =========================================)

$(call info-msg,                       pwd: $(CURDIR))
$(call info-msg,            Environment is: $(ENV))
$(call info-msg,              Source db is: $(SRC))

ifdef TGT_PFX
$(call info-msg,             Target prefix: $(TGT_PFX))
endif

$(call info-msg,                    Prefix: $(PFX))

$(call info-msg,          Source db is AON: $(SRC_AON))
$(call info-msg,              QC Source is: $(QDC_SOURCE))

$(call info-msg,           SRC table count: $(words $(SRC_TABLES)))

# #####################################
# Generate JDBC connect string
#
ifeq "$(SRC_AON)" "Y"
$(call info-msg,    JDBC Connection String: jdbc:sqlserver://$(SRC_HOST):$(SRC_PORT);applicationIntent=ReadOnly;database=$(SRC_DB);selectMethod=cursor;packetSize=16000;)
else
$(call info-msg,    JDBC Connection String: jdbc:sqlserver://$(SRC_HOST);applicationIntent=ReadOnly;database=$(SRC_DB);selectMethod=cursor;packetSize=16000;instanceName=$(SRC_INST))
endif

$(call info-msg,        Target table count: $(words $(TGT_TABLES)))

# #####################################
# Print poject info
#
ifeq ($(call filter,info,$(MAKECMDGOALS)),info)

$(call info-msg,)
$(call info-msg,        Project Info)
$(call info-msg,        ============)
$(foreach V,$(sort $(.VARIABLES)), \
  $(if $(filter project%,$(call lc,$V)), \
  $(call info-msg,        $V: $($V))))
$(call info-msg,)

endif

